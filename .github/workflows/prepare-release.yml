name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version bump increment (major|minor|patch|custom)"
        required: true
        default: minor
      custom_version:
        description: "Explicit version when bump is custom (e.g. 0.8.1)"
        required: false
      previous_ref:
        description: "Reference to compare against (tag/commit). Defaults to last release tag"
        required: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Resolve previous reference
        id: refs
        run: |
          if [ -n "${{ github.event.inputs.previous_ref }}" ]; then
            echo "previous=${{ github.event.inputs.previous_ref }}" >> "$GITHUB_OUTPUT"
          else
            if git describe --tags --abbrev=0 >/tmp/last_tag 2>/dev/null; then
              last_tag=$(cat /tmp/last_tag)
            else
              last_tag=$(git rev-list --max-parents=0 HEAD | tail -n 1)
            fi
            echo "previous=$last_tag" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine release version
        id: version
        env:
          BUMP: ${{ github.event.inputs.bump }}
          CUSTOM_VERSION: ${{ github.event.inputs.custom_version }}
        run: |
          if [ "$BUMP" = "custom" ]; then
            if [ -z "$CUSTOM_VERSION" ]; then
              echo "custom_version input is required when bump is custom" >&2
              exit 1
            fi
            cargo set-version --workspace "$CUSTOM_VERSION"
            new_version="$CUSTOM_VERSION"
          else
            case "$BUMP" in
              major|minor|patch) ;;
              *)
                echo "bump must be one of major, minor, patch, or custom" >&2
                exit 1
                ;;
            esac
            cargo set-version --workspace --bump "$BUMP"
            new_version=$(cargo metadata --no-deps --format-version 1 |
              python -c 'import json,sys; data=json.load(sys.stdin); print(next(p["version"] for p in data["packages"] if p["name"]=="glues"))')
          fi

          echo "version=$new_version" >> "$GITHUB_OUTPUT"

      - name: Generate release notes skeleton
        id: notes
        env:
          PREVIOUS_REF: ${{ steps.refs.outputs.previous }}
          RELEASE_VERSION: ${{ steps.version.outputs.version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          compare_ref="$PREVIOUS_REF...HEAD"
          mkdir -p docs/releases

          notes_path="docs/releases/v${RELEASE_VERSION}.md"
          printf "# Glues v%s - Release Notes\n\n## What's Changed\n" "$RELEASE_VERSION" > "$notes_path"

          gh api \
            repos/${{ github.repository }}/compare/${compare_ref} \
            --paginate \
            --jq '.commits[].commit.message | split("\n")[0]' |
            grep '^Merge pull request' |
            sed 's/^/- /' >> "$notes_path"

          {
            echo "notes_path=$notes_path"
            echo "release_branch=release/v${RELEASE_VERSION}"
          } >> "$GITHUB_OUTPUT"

      - name: Configure git user
        run: |
          git config user.name "Taehoon Moon"
          git config user.email "taehoon.moon@outlook.com"

      - name: Create release branch
        env:
          RELEASE_VERSION: ${{ steps.version.outputs.version }}
        run: git checkout -b "release/v${RELEASE_VERSION}"

      - name: Commit changes
        run: |
          git add -A
          git commit -m "chore: prepare v${{ steps.version.outputs.version }}"

      - name: Push branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git push origin HEAD

      - name: Open draft PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release="${{ steps.version.outputs.version }}"
          body=$(printf '## Summary\n- bump workspace version to %s\n- add release notes at docs/releases/v%s.md\n' "$release" "$release")
          gh pr create \
            --title "Prepare v${release}" \
            --body "$body" \
            --draft
