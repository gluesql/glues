name: Publish Coverage

on:
  workflow_run:
    workflows: ["Coverage"]
    types: [completed]
  workflow_dispatch:
    inputs:
      run_id:
        description: "Run ID of the triggering Coverage workflow"
        required: true
        type: string
      pr_number:
        description: "Pull Request number"
        required: true
        type: string
      commit_sha:
        description: "Head commit SHA for the PR run"
        required: true
        type: string
      artifact_name:
        description: "Artifact name to download (default: coverage)"
        required: false
        default: coverage
        type: string

jobs:
  publish:
    if: >-
      (github.event_name == 'workflow_dispatch') ||
      (
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.event == 'pull_request' &&
        github.repository == 'gluesql/glues'
      )
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    steps:
      - name: Configure git user
        run: |
          git config --global user.email "glues.ci@example.com"
          git config --global user.name "Glues CI"

      - name: Create GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.COVERAGE_APP_ID }}
          installation-id: ${{ secrets.COVERAGE_APP_INSTALLATION_ID }}
          private-key: ${{ secrets.COVERAGE_APP_PRIVATE_KEY }}
          owner: gluesql
          repositories: glues, gluesql.github.io

      - name: Set variables for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "RUN_ID=${{ inputs.run_id }}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${{ inputs.commit_sha }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ inputs.pr_number }}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ inputs.artifact_name }}" >> $GITHUB_ENV

      - name: Set variables for workflow_run
        if: github.event_name == 'workflow_run'
        run: |
          echo "RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.workflow_run.pull_requests[0].number }}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=coverage" >> $GITHUB_ENV

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          run-id: ${{ env.RUN_ID }}
          path: coverage
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract coverage summary
        run: |
          xz -dc coverage/lcov.info.xz > coverage/lcov.info
          python3 - <<'PY'
          import os

          lf_hits = 0
          lf_found = 0
          da_hits = 0
          da_found = 0

          with open("coverage/lcov.info") as handle:
              for raw_line in handle:
                  line = raw_line.strip()
                  if line.startswith("LF:"):
                      try:
                          lf_found += int(line[3:])
                      except ValueError:
                          pass
                  elif line.startswith("LH:"):
                      try:
                          lf_hits += int(line[3:])
                      except ValueError:
                          pass
                  elif line.startswith("DA:"):
                      parts = line[3:].split(",")
                      if len(parts) >= 2:
                          da_found += 1
                          try:
                              count = int(parts[1])
                          except ValueError:
                              count = 0
                          if count > 0:
                              da_hits += 1

          if lf_found == 0:
              lf_found, lf_hits = da_found, da_hits

          coverage = 0.0 if lf_found == 0 else (lf_hits / lf_found) * 100.0

          env_path = os.environ.get("GITHUB_ENV")
          if env_path:
              with open(env_path, "a") as env_file:
                  env_file.write(f"LINE_COVERAGE={coverage:.2f}\n")
                  env_file.write(f"LINE_HITS={lf_hits}\n")
                  env_file.write(f"LINE_FOUND={lf_found}\n")

          print(f"Line coverage: {coverage:.2f}% ({lf_hits}/{lf_found})")
          PY

      - name: Set timestamp
        run: echo "TIMESTAMP=$(date -u +'%Y-%m-%dT%H%M%SZ')" >> $GITHUB_ENV

      - name: Publish coverage to gluesql.github.io
        run: |
          git clone https://github.com/gluesql/gluesql.github.io.git
          cd gluesql.github.io
          git checkout gh-pages
          git pull --rebase origin gh-pages
          mkdir -p coverage/glues/pr/${PR_NUMBER}
          cp ../coverage/lcov.info.xz coverage/glues/pr/${PR_NUMBER}/${TIMESTAMP}.${COMMIT_SHA}.lcov.info.xz
          git add coverage/glues/pr/${PR_NUMBER}/${TIMESTAMP}.${COMMIT_SHA}.lcov.info.xz
          git commit -m "Coverage: PR#${PR_NUMBER}@${COMMIT_SHA}"
          git push https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/gluesql/gluesql.github.io.git

      - name: Comment coverage link on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const prNumber = process.env.PR_NUMBER;
            const url = `https://gluesql.org/coverage/?path=glues/pr/${prNumber}/${process.env.TIMESTAMP}.${process.env.COMMIT_SHA}.lcov.info.xz`;
            const lineCoverage = process.env.LINE_COVERAGE;
            const lineHits = process.env.LINE_HITS;
            const lineFound = process.env.LINE_FOUND;
            const lines = [
              '### Glues Coverage Report',
              '',
            ];
            if (lineCoverage) {
              // Surface coverage stats before the rest of the metadata.
              lines.push(`- **Line Coverage:** ${lineCoverage}% (${lineHits}/${lineFound})`);
            }
            lines.push(
              `- **Commit:** \`${process.env.COMMIT_SHA}\``,
              `- **Timestamp:** \`${process.env.TIMESTAMP}\``,
              `- **Report:** [View report](${url})`,
            );
            const body = lines.join('\n');
            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
              },
            );
            const comment = comments.find(c => c.body.startsWith('### Glues Coverage Report'));
            if (comment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            }
